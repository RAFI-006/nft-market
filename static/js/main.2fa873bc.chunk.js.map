{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["CONTRACT_ADDRESS","TWITTER_HANDLE","TWITTER_LINK","App","useState","imagePreview","setImagePreview","image","setImage","loading","setLoading","uploaded","setUploaded","title","setTitle","description","setDescription","currentAccount","setCurrentAccount","ipfs","ipfsHttpClient","connectWallet","window","ethereum","alert","request","method","accounts","console","log","setupEventListener","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","sender","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","checkIfWalletIsConnected","length","account","titleChange","e","target","value","descriptionChange","uploadFiletoIPFS","preventDefault","add","added","path","priviewAndUploadImageButtton","className","styles","buildStyles","rotation","strokeLinecap","textSize","pathTransitionDuration","textColor","trailColor","backgroundColor","Image","style","height","src","thumbnail","onClick","toString","Form","Control","required","type","accept","onChange","files","URL","createObjectURL","createPreview","width","paddingBottom","id","name","placeholder","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fa873bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useState ,useEffect} from 'react'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport { CircularProgressbar,buildStyles } from 'react-circular-progressbar';\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\nimport {\n    Form,\n    Image,\n    Button,\n    ProgressBar,\n    Container,\n    Badge\n  } from 'react-bootstrap';\nconst CONTRACT_ADDRESS =\n  \"0x2abB474B84934279CdECAC26286B40d3445558b3\";\n  \n\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\nconst [imagePreview, setImagePreview] = useState('');\nconst [image, setImage] = useState({})\nconst [loading, setLoading] = useState(false)\nconst [uploaded, setUploaded] = useState(\"\")\nconst [title, setTitle] = useState(\"\")\nconst [description, setDescription] = useState(\"\")\nconst [currentAccount, setCurrentAccount] = useState(\"\");\nconst value = 1;\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n \n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (sender, tokenId) => {\n          console.log(sender, tokenId.toNumber());\n             console.log(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  const askContractToMintNft = async () => {\n    // const CONTRACT_ADDRESS =\n    //   \"0x8f7149F891e41122De516d08f7071B3960DA4973\";\n    setLoading(true);\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT(`ipfs://${uploaded}`,title,description);\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setLoading(false);\n       // setupEventListener();\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  useEffect(() => {\n    const checkIfWalletIsConnected = async () => {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        setupEventListener();\n      } else {\n        console.log(\"No authorized account found\");\n\n      }\n    }\n\n    checkIfWalletIsConnected();\n  }, [])\n\n\n  const titleChange = (e) => {\n    setTitle(e.target.value);\n  };\n  const descriptionChange = (e) =>\n  {\n      setDescription(e.target.value);\n  }\n\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button  onClick={connectWallet}  className=\"cta-button connect-wallet-button\">\n      {currentAccount ? currentAccount.toString() :\"Connect to Wallet\"}\n    </button>\n  );\n\n  const createPreview = (e) => {\n    if (e.target.value !== '') {\n       setImage(e.target.files[0])\n        const src = URL.createObjectURL(e.target.files[0])\n        setImagePreview(src)\n    } else {\n        setImagePreview('')\n    }\n}\n\nconst uploadFiletoIPFS = async (e) => {\n    setLoading(true)\n    e.preventDefault()\n\n    try {\n        const added = await ipfs.add(image);\n        const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n        console.log(`${added.path}`);\n       // setUrl(url)\n        //setImagePreview(url)\n        setUploaded(`${added.path}`);\n    } catch (err) {\n        console.log('Error uploading the file : ', err)\n    }\n    setLoading(false)\n}\n\nconst titleDescriptionView = () =>\n{\n  return loading ? <div className='progressbar-div' >\n  <CircularProgressbar \n  styles={buildStyles({\n     \n      \n\n     // Rotation of path and trail, in number of turns (0-1)\n     rotation: 0.25,\n \n     // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n     strokeLinecap: 'butt',\n \n     // Text size\n     textSize: '16px',\n \n     // How long animation takes to go from one percentage to another, in seconds\n     pathTransitionDuration: 0.5,\n \n     // Can specify path transition in more detail, or remove it entirely\n     // pathTransition: 'none',\n \n     // Colors\n    \n     textColor: '#f88',\n     trailColor: '#d6d6d6',\n     backgroundColor: '#3e98c7',\n   })}\n  />\n  <p>\n    Minting...Please Wait for  a while \n  </p>\n</div> :   <div className='title-descriptin-div'>\n\n<Image\n    style={{ height: '100px' ,width:'100px' ,paddingBottom : \"40px\"}}\n    className='mb-3'\n    src={imagePreview}\n    thumbnail\n/>    \n          <input \n       style={{height:'40px'}}\n        id='title'\n        type='text'\n        name='title'\n        placeholder='NFT Title'\n        value={title}\n        onChange={titleChange}\n      />\n   \n   <div   style={{ height: '30px'}} ></div>\n\n<input\n         style={{height:'40px'}}\n        id='messege'\n        type='text'\n        name='description'\n        placeholder='NFT Description'\n        value={description}\n        onChange={descriptionChange}\n      />\n <div   style={{ height: '30px'}} ></div>\n<button onClick={askContractToMintNft} className=\"mint-nft-button\">\n     \n     Mint NFT\n   </button>\n\n\n  </div>\n\n}\nconst  renderView = () => {\n\n   return uploaded? titleDescriptionView() : priviewAndUploadImageButtton()\n\n}\n\nconst priviewAndUploadImageButtton = () =>\n{\n\n     return  loading ? <div className='progressbar-div' >\n     <CircularProgressbar \n     styles={buildStyles({\n        \n         \n\n        // Rotation of path and trail, in number of turns (0-1)\n        rotation: 0.25,\n    \n        // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n        strokeLinecap: 'butt',\n    \n        // Text size\n        textSize: '16px',\n    \n        // How long animation takes to go from one percentage to another, in seconds\n        pathTransitionDuration: 0.5,\n    \n        // Can specify path transition in more detail, or remove it entirely\n        // pathTransition: 'none',\n    \n        // Colors\n       \n        textColor: '#f88',\n        trailColor: '#d6d6d6',\n        backgroundColor: '#3e98c7',\n      })}\n     />\n     <p>\n       Adding Image to IPFS  \n     </p>\n   </div>   : <div className=\"image-preview\">\n\n<Image\n    style={{ height: '300px' }}\n    className='mb-3'\n    src={imagePreview}\n    thumbnail\n/>    \n\n<button onClick={uploadFiletoIPFS} className=\"mint-nft-button\">\n     \n      NEXT\n    </button>\n\n    </div>  \n\n}\n  \n\nconst walletNotConnectedView = () =>\n{\nreturn  <div className='wallet-notconnected-view-div' >\n\n<Image\n    style={{ height: '200px' }}\n    className='mb-3'\n    src= \"https://api.byhanddelivery.com/images/blob/profiles/9f14cab2-2c45-49fc-a0b0-5e6c2d68b7a9.png\"\n    thumbnail\n/>   \n\n\n<p>Connect to Rinkeyby Wallet and Create your NFT's.</p>\n\n<p>Make Sure you have enough balance in your account to do transactions.</p>\n</div>\n}\n\nconst addImageDiv = () =>\n{\n   return  <div className=\"add-image-div\">\n   <div>\n      <Form className='form-div' >\n          <Form.Control\n              required\n              type='file'\n              accept='image/*'\n              onChange={(e)=> createPreview(e)}\n              className='mb-3'\n          />\n\n        \n      </Form>\n  </div>\n     </div>\n\n}\n\nreturn (\n    \n    <div className=\"App\">\n   \n   <div className=\"connectWalletDiv\">\n      {renderNotConnectedContainer()}\n      </div>\n      <div style={{height:\"10%\"}}></div>\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">NFT MAKER</p>\n          <p className=\"sub-text\">\n          Create your NFT's and List to OpenaSea TestNet.\n          </p>\n         \n              {currentAccount?   addImageDiv() : walletNotConnectedView()}\n       \n         \n            {imagePreview ?  renderView(): \"\"} \n\n\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}